distances[(i-1)*nrow(pub_data)+j,3] <- distGeo(as.numeric(c(pub_data$lat[i],pub_data$long[i])),
as.numeric(c(pub_data$lat[j],pub_data$long[j])))
}
print(paste("recorded distance for", i , "pubs of", nrow(pub_data)))
}
}
names(distances) <- c("pub1","pub2","distance")
distances$pub1 <- round(as.numeric(distances$pub1))
distances$pub2 <- round(as.numeric(distances$pub2))
#genetic algorithm
#####
#find shortest route from brewery around all pubs and back to brewery again
#make initial population
population <- data.frame()
for(i in c(1:100)){
row <- c(nrow(pub_data), sample(c(1:(nrow(pub_data)-1)),nrow(pub_data)-1),nrow(pub_data))
population <- rbind(population,row)
}
colnames(population) <- c(1:ncol(population))
#find total travel distance for each individual (row)
population$total_distance <- rep(0,nrow(population))
for(i in c(1:nrow(population))){
distance <- 0
for (j in c(1:(ncol(population)-2))){
leg_distance <- filter(distances,pub1 == population[i,j] ,
pub2 == population[i,j+1])$distance
distance <- distance + leg_distance
}
population$total_distance[i] <- distance
print(i)
}
population <- population %>%
arrange(total_distance)
elites <- head(population,20)
results_record <-data.frame()
#iterate to find shortest route
#####
while(T){
#carry, mutate or cross
carry_forward <- population[c(1:5),]
mutate_elites <- elites[sample(1:nrow(elites),20,replace=T),]
for(i in (1:nrow(mutate_elites))){
mutate_elites[i,]<-mutate(as.numeric(mutate_elites[i,]),sample(c(1:25),1))
}
crosses <- elites[sample(1:nrow(elites),120,replace=T),]
for(i in( (1: 50))){
crosses[i,] <- cross(as.numeric(crosses[i,]) , as.numeric(crosses[sample(1:nrow(crosses),1),]))
if (runif(1) < 0.75){
crosses[i,] <- mutate(as.numeric(crosses[i,]),sample(c(1:15),1)) #mutate half the crosses
}
}
mutate_sub_elites <- population[sample(1:nrow(population),25),]
for(i in (1:nrow(mutate_sub_elites))){
mutate_sub_elites[i,]<-mutate(as.numeric(mutate_sub_elites[i,]),sample(c(1:25),1))
}
population <- rbind(carry_forward,mutate_elites,crosses,mutate_sub_elites)
#calculate the new distances for the new instances
for(i in c(1:nrow(population))){
distance <- 0
for (j in c(1:(ncol(population)-2))){
leg_distance <- filter(distances,pub1 == population[i,j] ,
pub2 == population[i,j+1])$distance
distance <- distance + leg_distance
# print(distance)
#print(i)
#print(j)
}
population$total_distance[i] <- distance
}
population <- population %>%
arrange(total_distance)
elites <- head(population,20)
print(elites[1,"total_distance"])
results_record <- rbind(results_record , elites[1,])
}
#helper functions
#####
mutate <- function(instance,degree){ #degee is the number of swaps carried out
for(i in c(1:degree)){
rand1 <- sample(2:(length(instance)-2))
rand2 <- sample(2:(length(instance)-2))
instance <- replace(instance,c(rand1,rand2),instance[c(rand2,rand1)])
}
instance
}
cross <- function(instance1 , instance2){
#generate sample holdout indices
rand1_temp <- sample(3:(length(instance1)-2),1)
rand2_temp <- sample(3:(length(instance1)-2),1)
if (rand1_temp > rand2_temp){ #ensure largest is rand2
rand2 <- rand1_temp
rand1 <- rand2_temp
}else{
rand1 <- rand1_temp
rand2 <- rand2_temp
}
new_instance <- c(instance1[1],(rep(0,length(instance1)-2)),instance1[length(instance1)])
instance_2_holdout <- instance2[c(rand1:rand2)]
instance_1_less_holdout <- setdiff(instance1 , instance_2_holdout)
instance_1_less_holdout <- instance_1_less_holdout[-length(instance_1_less_holdout)]
#add holdout to the new instance
new_instance[c(rand1:rand2)]<-instance_2_holdout
j<-2 #less holdout counter
for(i in c(2:(length(instance1)-2))){
if(i >= rand1 && i<= rand2){# skip already populated values
next
}else{
new_instance[i]<-instance_1_less_holdout[j]
j = j+1
}
}
new_instance[length(new_instance)-1] <- instance1[length(instance1)-1] #ensure last point is the starting point
new_instance
}
#helper functions
#####
mutate <- function(instance,degree){ #degee is the number of swaps carried out
for(i in c(1:degree)){
rand1 <- sample(2:(length(instance)-2))
rand2 <- sample(2:(length(instance)-2))
instance <- replace(instance,c(rand1,rand2),instance[c(rand2,rand1)])
}
instance
}
cross <- function(instance1 , instance2){
#generate sample holdout indices
rand1_temp <- sample(3:(length(instance1)-3),1)
rand2_temp <- sample(3:(length(instance1)-3),1)
if (rand1_temp > rand2_temp){ #ensure largest is rand2
rand2 <- rand1_temp
rand1 <- rand2_temp
}else{
rand1 <- rand1_temp
rand2 <- rand2_temp
}
new_instance <- c(instance1[1],(rep(0,length(instance1)-2)),instance1[length(instance1)])
instance_2_holdout <- instance2[c(rand1:rand2)]
instance_1_less_holdout <- setdiff(instance1 , instance_2_holdout)
instance_1_less_holdout <- instance_1_less_holdout[-length(instance_1_less_holdout)]
#add holdout to the new instance
new_instance[c(rand1:rand2)]<-instance_2_holdout
j<-2 #less holdout counter
for(i in c(2:(length(instance1)-2))){
if(i >= rand1 && i<= rand2){# skip already populated values
next
}else{
new_instance[i]<-instance_1_less_holdout[j]
j = j+1
}
}
new_instance[length(new_instance)-1] <- instance1[length(instance1)-1] #ensure last point is the starting point
new_instance
}
results_record <-data.frame()
#iterate to find shortest route
#####
while(T){
#carry, mutate or cross
carry_forward <- population[c(1:5),]
mutate_elites <- elites[sample(1:nrow(elites),20,replace=T),]
for(i in (1:nrow(mutate_elites))){
mutate_elites[i,]<-mutate(as.numeric(mutate_elites[i,]),sample(c(1:25),1))
}
crosses <- elites[sample(1:nrow(elites),120,replace=T),]
for(i in( (1: 50))){
crosses[i,] <- cross(as.numeric(crosses[i,]) , as.numeric(crosses[sample(1:nrow(crosses),1),]))
if (runif(1) < 0.75){
crosses[i,] <- mutate(as.numeric(crosses[i,]),sample(c(1:15),1)) #mutate half the crosses
}
}
mutate_sub_elites <- population[sample(1:nrow(population),25),]
for(i in (1:nrow(mutate_sub_elites))){
mutate_sub_elites[i,]<-mutate(as.numeric(mutate_sub_elites[i,]),sample(c(1:25),1))
}
population <- rbind(carry_forward,mutate_elites,crosses,mutate_sub_elites)
#calculate the new distances for the new instances
for(i in c(1:nrow(population))){
distance <- 0
for (j in c(1:(ncol(population)-2))){
leg_distance <- filter(distances,pub1 == population[i,j] ,
pub2 == population[i,j+1])$distance
distance <- distance + leg_distance
# print(distance)
#print(i)
#print(j)
}
population$total_distance[i] <- distance
}
population <- population %>%
arrange(total_distance)
elites <- head(population,20)
print(elites[1,"total_distance"])
results_record <- rbind(results_record , elites[1,])
}
#find shortest route from brewery around all pubs and back to brewery again
#make initial population
population <- data.frame()
for(i in c(1:100)){
row <- c(nrow(pub_data), sample(c(1:(nrow(pub_data)-1)),nrow(pub_data)-1),nrow(pub_data))
population <- rbind(population,row)
}
colnames(population) <- c(1:ncol(population))
#find total travel distance for each individual (row)
population$total_distance <- rep(0,nrow(population))
for(i in c(1:nrow(population))){
distance <- 0
for (j in c(1:(ncol(population)-2))){
leg_distance <- filter(distances,pub1 == population[i,j] ,
pub2 == population[i,j+1])$distance
distance <- distance + leg_distance
}
population$total_distance[i] <- distance
print(i)
}
population <- population %>%
arrange(total_distance)
elites <- head(population,20)
results_record <-data.frame()
#iterate to find shortest route
counter<-0
#####
while(T){
#carry, mutate or cross
carry_forward <- population[c(1:5),]
mutate_elites <- elites[sample(1:nrow(elites),20,replace=T),]
for(i in (1:nrow(mutate_elites))){
mutate_elites[i,]<-mutate(as.numeric(mutate_elites[i,]),sample(c(1:15),1))
}
crosses <- elites[sample(1:nrow(elites),120,replace=T),]
for(i in( (1: 50))){
crosses[i,] <- cross(as.numeric(crosses[i,]) , as.numeric(crosses[sample(1:nrow(crosses),1),]))
if (runif(1) < 0.5){
crosses[i,] <- mutate(as.numeric(crosses[i,]),sample(c(1:15),1)) #mutate half the crosses
}
}
mutate_sub_elites <- population[sample(1:nrow(population),25),]
for(i in (1:nrow(mutate_sub_elites))){
mutate_sub_elites[i,]<-mutate(as.numeric(mutate_sub_elites[i,]),sample(c(1:25),1))
}
population <- rbind(carry_forward,mutate_elites,crosses,mutate_sub_elites)
#calculate the new distances for the new instances
for(i in c(1:nrow(population))){
distance <- 0
for (j in c(1:(ncol(population)-2))){
leg_distance <- filter(distances,pub1 == population[i,j] ,
pub2 == population[i,j+1])$distance
distance <- distance + leg_distance
# print(distance)
#print(i)
#print(j)
}
population$total_distance[i] <- distance
}
population <- population %>%
arrange(total_distance)
elites <- head(population,20)
print(elites[1,"total_distance"])
results_record <- rbind(results_record , elites[1,])
if(counter %%10 ==0){
save(results_record, file="pub_results.Rdata")
}
}
save.image("~/pub_core_dump.RData")
results_record
View(results_record)
save.image("~/Desktop/core_dump.RData")
while(T){
#carry, mutate or cross
carry_forward <- population[c(1:5),]
mutate_elites <- elites[sample(1:nrow(elites),20,replace=T),]
for(i in (1:nrow(mutate_elites))){
mutate_elites[i,]<-mutate(as.numeric(mutate_elites[i,]),sample(c(1:15),1))
}
crosses <- elites[sample(1:nrow(elites),120,replace=T),]
for(i in( (1: 50))){
crosses[i,] <- cross(as.numeric(crosses[i,]) , as.numeric(crosses[sample(1:nrow(crosses),1),]))
if (runif(1) < 0.5){
crosses[i,] <- mutate(as.numeric(crosses[i,]),sample(c(1:15),1)) #mutate half the crosses
}
}
mutate_sub_elites <- population[sample(1:nrow(population),25),]
for(i in (1:nrow(mutate_sub_elites))){
mutate_sub_elites[i,]<-mutate(as.numeric(mutate_sub_elites[i,]),sample(c(1:25),1))
}
population <- rbind(carry_forward,mutate_elites,crosses,mutate_sub_elites)
#calculate the new distances for the new instances
for(i in c(1:nrow(population))){
distance <- 0
for (j in c(1:(ncol(population)-2))){
leg_distance <- filter(distances,pub1 == population[i,j] ,
pub2 == population[i,j+1])$distance
distance <- distance + leg_distance
# print(distance)
#print(i)
#print(j)
}
population$total_distance[i] <- distance
}
population <- population %>%
arrange(total_distance)
elites <- head(population,20)
print(elites[1,"total_distance"])
results_record <- rbind(results_record , elites[1,])
if(counter %%10 ==0){
save(results_record, file="pub_results.Rdata")
}
}
save.image("~/core_dump.RData")
save.image("~/Desktop/heineken/core_dump.RData")
mode <- "direct" #direct or driving
set.api.key("AIzaSyDugbksaJj6SAs8Q2YySMEDbRXvfylzPe0")
brewery_data <- data.frame("lat"=55.934956, "long"=-3.21138)
pub_data <- read.csv("C:\\Users\\Alex\\Documents\\R\\uk_pubs\\open_pubs.csv",header=F,stringsAsFactors = F)
names(pub_data) <- c("index","pub_name","address","postcode","easting","northing","lat","long","city")
#get names of scottish area suthorities
scottish_towns <- unique(pub_data[c(44232:48193),]$city)
set.seed(60)
pub_data <- pub_data[sample(nrow(pub_data),2900),]
#take scottish pubs only
pub_data <- filter(pub_data,city %in% scottish_towns)
#re-index
pub_data$index <- c(1:nrow(pub_data))
#add the brewery to the pub data
pub_data[(nrow(pub_data)+1),] <- c((nrow(pub_data)+1),"brewery","","","","",brewery_data[1,"lat"],brewery_data[1,"long"],"Edinburgh")
pub_data$index <- as.numeric(pub_data$index)
#list of coordinates for route
first_route <- as.data.frame(t(results_record[755,c(1:237)]))%>%
left_join(pub_data, by=c("755" = "index"))
#plot a map
sbbox <- make_bbox(lon = as.numeric(pub_data$long),
lat = as.numeric(pub_data$lat),f=0.5)
sq_map <- get_map(location = sbbox, maptype = "roadmap", source = "google")
ggmap(sq_map) +
geom_point(data = pub_data,
mapping = aes(x = as.numeric(pub_data$long),
y = as.numeric(pub_data$lat)),
color = "red")+
geom_point(data = brewery_data,
mapping=aes(x=brewery_data$long, y=brewery_data$lat),
color="blue",size=2)
ggmap(sq_map) +
geom_path(data=first_route,
mapping=aes(x=as.numeric(first_route$long),y=as.numeric(first_route$lat)))+
labs(title = "iteration #750 ")
while(T){
#carry, mutate or cross
carry_forward <- population[c(1:5),]
mutate_elites <- elites[sample(1:nrow(elites),20,replace=T),]
for(i in (1:nrow(mutate_elites))){
mutate_elites[i,]<-mutate(as.numeric(mutate_elites[i,]),sample(c(1:15),1))
}
crosses <- elites[sample(1:nrow(elites),120,replace=T),]
for(i in( (1: 50))){
crosses[i,] <- cross(as.numeric(crosses[i,]) , as.numeric(crosses[sample(1:nrow(crosses),1),]))
if (runif(1) < 0.5){
crosses[i,] <- mutate(as.numeric(crosses[i,]),sample(c(1:15),1)) #mutate half the crosses
}
}
mutate_sub_elites <- population[sample(1:nrow(population),25),]
for(i in (1:nrow(mutate_sub_elites))){
mutate_sub_elites[i,]<-mutate(as.numeric(mutate_sub_elites[i,]),sample(c(1:25),1))
}
population <- rbind(carry_forward,mutate_elites,crosses,mutate_sub_elites)
#calculate the new distances for the new instances
for(i in c(1:nrow(population))){
distance <- 0
for (j in c(1:(ncol(population)-2))){
leg_distance <- filter(distances,pub1 == population[i,j] ,
pub2 == population[i,j+1])$distance
distance <- distance + leg_distance
# print(distance)
#print(i)
#print(j)
}
population$total_distance[i] <- distance
}
population <- population %>%
arrange(total_distance)
elites <- head(population,20)
print(elites[1,"total_distance"])
results_record <- rbind(results_record , elites[1,])
if(counter %%10 ==0){
save(results_record, file="pub_results.Rdata")
}
}
load("~/pub_core_dump.RData")
View(results_record)
length(results_record[1,])
length(unique(results_record[1,]))
df <- read.csv("//Users//Hannah//alex//ISSN_M_tot.csv")
setwd("~/Desktop/alex/stream-analysis/twitter-fracking")
setwd("~/Desktop/alex/stream-analysis/twitter-fracking")
users <- read.csv("frac_users.csv")
rm(df)
View(head(users))
users <- read.csv("frac_users.csv")
unique_ids <- unique(users$id)
unique_ids
?grepl
unique_ids$take_ids <- grep(paste(unique_ids,collapse="|",users$followers,value=T))
unique_ids$take_ids <- grep(pattern=paste(unique_ids,collapse="|"),x=users$followers,value=T)
users$take_ids <- grep(pattern=paste(unique_ids,collapse="|"),x=users$followers,value=T)
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
users$take_ids <- grep(pattern=paste(unique_ids,collapse="|"),x=users$followers,value=T)
View(users)
paste(unique_ids,collapse="|")
paste("/",paste(unique_ids,collapse="|"),"\b/")
users$take_ids <- grep(pattern=paste("/(",paste(unique_ids,collapse="|"),")\b/"),x=users$followers,value=T)
users$take_ids <- sample(unique_ids)
View(users)
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
users$take_ids <- sample(rep(NULL,800),unique_ids)
users$take_ids1 <- sample(rep(NULL,800),unique_ids)
users$take_ids2 <- sample(rep(NULL,800),unique_ids)
users$take_ids3 <- sample(rep(NULL,800),unique_ids)
users$take_ids4 <- sample(rep(NULL,800),unique_ids)
View(users)
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
users$take_ids <- sample(c(rep(NULL,800),unique_ids))
users$take_ids1 <- sample(c(rep(NULL,800),unique_ids))
users$take_ids2 <- sample(c(rep(NULL,800),unique_ids))
users$take_ids3 <- sample(c(rep(NULL,800),unique_ids))
users$take_ids4 <- sample(c(rep(NULL,800),unique_ids))
View(users)
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
unique_ids <- unique_ids[2:length(unique_ids)]
users$take_ids <- sample(c(rep(NULL,800),unique_ids))
users$take_ids1 <- sample(c(rep(NULL,800),unique_ids))
users$take_ids2 <- sample(c(rep(NULL,800),unique_ids))
users$take_ids3 <- sample(c(rep(NULL,800),unique_ids))
users$take_ids4 <- sample(c(rep(NULL,800),unique_ids))
unique_ids
sample(c(rep(NULL,800),unique_ids))
sample(c(rep(NULL,800),unique_ids))
unique_ids[2:length(unique_ids)]
sample(c(rep(NULL,800),unique_ids),1)
users$take_ids <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids1 <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids2 <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids3 <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids4 <- sample(c(rep(NULL,800),unique_ids),1)
View(users)
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
unique_ids <- unique_ids[2:length(unique_ids)]
users$take_ids <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids1 <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids2 <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids3 <- sample(c(rep(NULL,800),unique_ids),1)
users$take_ids4 <- sample(c(rep(NULL,800),unique_ids),1)
View(users)
unique_ids
c(rep(NULL,800),unique_ids)
users$take_ids <- sample(c(rep(0,800),unique_ids),1)
users$take_ids1 <- sample(c(rep(0,800),unique_ids),1)
users$take_ids2 <- sample(c(rep(0,800),unique_ids),1)
users$take_ids3 <- sample(c(rep(0,800),unique_ids),1)
users$take_ids4 <- sample(c(rep(0,800),unique_ids),1)
View(users)
sample(c(rep(0,800),unique_ids),1)
sample(c(rep(0,800),unique_ids),1)
sample(c(rep(0,800),unique_ids),1)
sample(c(rep(0,800),unique_ids),1)
sample(c(rep(0,800),unique_ids),1)
sample(c(rep(0,800),unique_ids),1)
sample(c(rep(0,800),unique_ids),1)
sample(c(rep(0,800),unique_ids),1)
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
unique_ids <- unique_ids[2:length(unique_ids)]
take_ids <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids1 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids2 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids3 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids4 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
users$take_ds <- take_ids
users$take_ds1 <- take_ids1
users$take_ds2 <- take_ids2
users$take_ds3 <- take_ids3
users$take_ds4 <- take_ids4
nrow(users)
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
unique_ids <- unique_ids[2:length(unique_ids)]
take_ids <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids1 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids2 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids3 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
take_ids4 <- sample(c(rep(NULL,800),unique_ids),nrow(users))
users$take_ids <- take_ids
users$take_ids1 <- take_ids1
users$take_ids2 <- take_ids2
users$take_ids3 <- take_ids3
users$take_ids4 <- take_ids4
users <- read.csv("frac_users.csv")
unique_ids <- as.character(unique(users$id))
unique_ids <- unique_ids[2:length(unique_ids)]
take_ids <- sample(c(rep(0,800),unique_ids),nrow(users))
take_ids1 <- sample(c(rep(0,800),unique_ids),nrow(users))
take_ids2 <- sample(c(rep(0,800),unique_ids),nrow(users))
take_ids3 <- sample(c(rep(0,800),unique_ids),nrow(users))
take_ids4 <- sample(c(rep(0,800),unique_ids),nrow(users))
users$take_ids <- take_ids
users$take_ids1 <- take_ids1
users$take_ids2 <- take_ids2
users$take_ids3 <- take_ids3
users$take_ids4 <- take_ids4
View(users)
